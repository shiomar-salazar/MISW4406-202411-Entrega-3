version: '3'
# Redes
networks:
  pulsar:
    driver: bridge
  companiasnet:
    driver: bridge
  contratosnet:
    driver: bridge
  propiedadesnet:
    driver: bridge
  saganet:
    driver: bridge
  bffnet:
    driver: bridge
  servicesnet:
    driver: bridge
# Servicios
services:
  # Pulsar stand alone
  pulsar:
    image: apachepulsar/pulsar:3.2.0
    container_name: pulsar
    restart: on-failure
    ports:
      - "6650:6650"
      - "8080:8080"
    command: ["bin/pulsar", "standalone"]
    networks:
      - pulsar
  # Bases de datos de Compañias
  companiasdb:
    image: postgres:latest
    container_name: companiasdb
    ports:
      - "5432:5432"
    networks:
      - companiasnet
    environment:
      POSTGRES_DB: companiasdb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_HOST: localhost
      POSTGRES_PORT: 5432
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 2s
      timeout: 5s
      retries: 5
  # Bases de datos de Contratos
  contratosdb:
    image: postgres:latest
    container_name: contratosdb
    ports:
      - "5433:5432"
    networks:
      - contratosnet
    environment:
      POSTGRES_DB: contratosdb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_HOST: localhost
      POSTGRES_PORT: 5432
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 2s
      timeout: 5s
      retries: 5
  # Bases de datos de Propiedades
  propiedadesdb:
    image: postgres:latest
    container_name: propiedadesdb
    ports:
      - "5434:5432"
    networks:
      - propiedadesnet
    environment:
      POSTGRES_DB: propiedadesdb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_HOST: localhost
      POSTGRES_PORT: 5432
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 2s
      timeout: 5s
      retries: 5
  # Bases de datos de la saga
  sagadb:
    image: postgres:latest
    container_name: sagadb
    ports:
      - "5435:5432"
    networks:
      - saganet
    environment:
      POSTGRES_DB: sagadb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_HOST: localhost
      POSTGRES_PORT: 5432
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 2s
      timeout: 5s
      retries: 5
  # Servicio de Compañias - Propiedades Alpes
  companias:
    container_name: companias
    hostname: companias
    restart: on-failure
    build:
      context: .
      dockerfile: companias.Dockerfile
    environment:
      - BROKER_HOST=pulsar
      - POSTGRES_DB=companiasdb
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_HOST=companiasdb
      - POSTGRES_PORT=5432
    ports:
      - "5000:5000"
    networks:
      - pulsar
      - companiasnet
      - servicesnet
    depends_on:
      companiasdb:
        condition: service_healthy
      pulsar:
        condition: service_started
  # Servicio de Contratos - Propiedades Alpes
  contratos:
    container_name: contratos
    hostname: contratos
    restart: on-failure
    build:
      context: .
      dockerfile: contratos.Dockerfile
    environment:
      - BROKER_HOST=pulsar
      - POSTGRES_DB=contratosdb
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_HOST=contratosdb
      - POSTGRES_PORT=5432
    ports:
      - "5001:5000"
    networks:
      - pulsar
      - contratosnet
      - servicesnet
    depends_on:
      contratosdb:
        condition: service_healthy
      pulsar:
        condition: service_started
# Servicio de propiedades - Propiedades Alpes
  propiedades:
    container_name: propiedades
    hostname: propiedades
    restart: on-failure
    build:
      context: .
      dockerfile: propiedades.Dockerfile
    environment:
      - BROKER_HOST=pulsar
      - POSTGRES_DB=propiedadesdb
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_HOST=propiedadesdb
      - POSTGRES_PORT=5432
    ports:
      - "5002:5000"
    networks:
      - pulsar
      - propiedadesnet
      - servicesnet
    depends_on:
      propiedadesdb:
        condition: service_healthy
      pulsar:
        condition: service_started
# Servicio de propiedades - Propiedades Alpes
  saga:
    container_name: saga
    hostname: saga
    restart: on-failure
    build:
      context: .
      dockerfile: saga.Dockerfile
    environment:
      - BROKER_HOST=pulsar
      - POSTGRES_DB=sagadb
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_HOST=sagadb
      - POSTGRES_PORT=5432
      - HOST_PROPIEDADES=http://propiedades:5000
      - HOST_COMPANIAS=http://companias:5000
      - HOST_CONTRATOS=http://contratos:5000      
    ports:
      - "5003:5000"
    networks:
      - pulsar
      - saganet
      - servicesnet
    depends_on:
      sagadb:
        condition: service_healthy
      pulsar:
        condition: service_started
  bff:
    container_name: bff
    hostname: bff
    restart: on-failure
    build:
      context: .
      dockerfile: bff.Dockerfile
    environment:
      - HOST_PROPIEDADES=http://propiedades:5000
      - HOST_COMPANIAS=http://companias:5000
      - HOST_CONTRATOS=http://contratos:5000
      - HOST_SAGA=http://saga:5000
      - API_CONSULTA_PROPIEDADES=/propiedad/direccion
      - API_CONSULTA_COMPANIAS=/compania/direccion
      - API_CONSULTA_CONTRATOS=/contrato/
      - API_CREAR_SAGA=/saga-contratos/crear-contrato
    ports:
      - "5004:5000"
    networks:
      - pulsar
      - propiedadesnet
      - companiasnet
      - contratosnet
      - bffnet
      - saganet
      - servicesnet
    # depends_on:
    #   propiedadesdb:
    #     condition: service_healthy
    #   pulsar:
    #     condition: service_started
  # # Start zookeeper
  # zookeeper:
  #   image: apachepulsar/pulsar:latest
  #   container_name: zookeeper
  #   restart: on-failure
  #   volumes:
  #     - ./data/zookeeper:/pulsar/data/zookeeper
  #   environment:
  #     - metadataStoreUrl=zk:zookeeper:2181
  #     - PULSAR_MEM=-Xms256m -Xmx256m -XX:MaxDirectMemorySize=256m
  #   command: >
  #     bash -c "bin/apply-config-from-env.py conf/zookeeper.conf && \
  #            bin/generate-zookeeper-config.sh conf/zookeeper.conf && \
  #            exec bin/pulsar zookeeper"
  #   healthcheck:
  #     test: ["CMD", "bin/pulsar-zookeeper-ruok.sh"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 30
  #   networks:
  #     - pulsar
  # # Init cluster metadata
  # pulsar-init:
  #   container_name: pulsar-init
  #   hostname: pulsar-init
  #   image: apachepulsar/pulsar:latest
  #   command: >
  #     bin/pulsar initialize-cluster-metadata \
  #              --cluster cluster-a \
  #              --zookeeper zookeeper:2181 \
  #              --configuration-store zookeeper:2181 \
  #              --web-service-url http://broker:8080 \
  #              --broker-service-url pulsar://broker:6650
  #   depends_on:
  #     zookeeper:
  #       condition: service_healthy
  #   networks:
  #     - pulsar
  # # Start bookie
  # bookie:
  #   image: apachepulsar/pulsar:latest
  #   container_name: bookie
  #   restart: on-failure
  #   environment:
  #     - clusterName=cluster-a
  #     - zkServers=zookeeper:2181
  #     - metadataServiceUri=metadata-store:zk:zookeeper:2181
  #     - advertisedAddress=bookie
  #     - BOOKIE_MEM=-Xms512m -Xmx512m -XX:MaxDirectMemorySize=256m
  #   depends_on:
  #     zookeeper:
  #       condition: service_healthy
  #     pulsar-init:
  #       condition: service_completed_successfully
  #   volumes:
  #     - ./data/bookkeeper:/pulsar/data/bookkeeper
  #   command: bash -c "bin/apply-config-from-env.py conf/bookkeeper.conf && exec bin/pulsar bookie"
  #   networks:
  #     - pulsar
  # # Start broker
  # broker:
  #   image: apachepulsar/pulsar:latest
  #   container_name: broker
  #   hostname: broker
  #   restart: on-failure
  #   environment:
  #     - metadataStoreUrl=zk:zookeeper:2181
  #     - zookeeperServers=zookeeper:2181
  #     - clusterName=cluster-a
  #     - managedLedgerDefaultEnsembleSize=1
  #     - managedLedgerDefaultWriteQuorum=1
  #     - managedLedgerDefaultAckQuorum=1
  #     - advertisedAddress=broker
  #     - advertisedListeners=external:pulsar://127.0.0.1:6650
  #     - PULSAR_MEM=-Xms512m -Xmx512m -XX:MaxDirectMemorySize=256m
  #   depends_on:
  #     zookeeper:
  #       condition: service_healthy
  #     bookie:
  #       condition: service_started
  #   ports:
  #     - "6650:6650"
  #     - "8080:8080"
  #   networks:
  #     - pulsar
  #   command: bash -c "bin/apply-config-from-env.py conf/broker.conf && exec bin/pulsar broker"